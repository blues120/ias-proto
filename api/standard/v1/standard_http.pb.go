// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.21.9
// source: standard/v1/standard.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAgentAlgoCallback = "/standard.v1.Agent/AlgoCallback"
const OperationAgentReplaceAlgorithmModel = "/standard.v1.Agent/ReplaceAlgorithmModel"

type AgentHTTPServer interface {
	// AlgoCallback 算法回调，用于上传算法输出结果
	AlgoCallback(context.Context, *AlgoOutput) (*AlgoOutputResponse, error)
	// ReplaceAlgorithmModel agent_config，替换algorithm.model
	ReplaceAlgorithmModel(context.Context, *ReplaceRequest) (*ReplaceResponse, error)
}

func RegisterAgentHTTPServer(s *http.Server, srv AgentHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/algo/callback", _Agent_AlgoCallback0_HTTP_Handler(srv))
	r.POST("/api/v1/algo/replace", _Agent_ReplaceAlgorithmModel0_HTTP_Handler(srv))
}

func _Agent_AlgoCallback0_HTTP_Handler(srv AgentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AlgoOutput
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAgentAlgoCallback)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AlgoCallback(ctx, req.(*AlgoOutput))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AlgoOutputResponse)
		return ctx.Result(200, reply)
	}
}

func _Agent_ReplaceAlgorithmModel0_HTTP_Handler(srv AgentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReplaceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAgentReplaceAlgorithmModel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReplaceAlgorithmModel(ctx, req.(*ReplaceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReplaceResponse)
		return ctx.Result(200, reply)
	}
}

type AgentHTTPClient interface {
	AlgoCallback(ctx context.Context, req *AlgoOutput, opts ...http.CallOption) (rsp *AlgoOutputResponse, err error)
	ReplaceAlgorithmModel(ctx context.Context, req *ReplaceRequest, opts ...http.CallOption) (rsp *ReplaceResponse, err error)
}

type AgentHTTPClientImpl struct {
	cc *http.Client
}

func NewAgentHTTPClient(client *http.Client) AgentHTTPClient {
	return &AgentHTTPClientImpl{client}
}

func (c *AgentHTTPClientImpl) AlgoCallback(ctx context.Context, in *AlgoOutput, opts ...http.CallOption) (*AlgoOutputResponse, error) {
	var out AlgoOutputResponse
	pattern := "/api/v1/algo/callback"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAgentAlgoCallback))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AgentHTTPClientImpl) ReplaceAlgorithmModel(ctx context.Context, in *ReplaceRequest, opts ...http.CallOption) (*ReplaceResponse, error) {
	var out ReplaceResponse
	pattern := "/api/v1/algo/replace"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAgentReplaceAlgorithmModel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
